# structure/SConstruct
#
# SCons buildfile for "Structure0815" solver
#
######################################

import os;
import sys;


##### Determine boost root path from environment variable
#
boostRootPath = os.getenv ( 'BOOST_ROOT' )
if ( boostRootPath == None ):
   print 'ERROR: Environment variable BOOST_ROOT not defined!'
   sys.exit(1)
else:
   print 'Using environment variable BOOST_ROOT =', boostRootPath

peanoRoot = os.getenv ('PEANO_ROOT')
if ( peanoRoot == None ):
   print 'ERROR: Environment variable PEANO_ROOT not defined!'
   sys.exit(1)
else:
   print 'Using environment variable PEANO_ROOT =', peanoRoot
   
preciceRoot = os.getenv ('PRECICE_ROOT')
if ( preciceRoot == None ):
   print 'ERROR: Environment variable PRECICE_ROOT not defined!'
   sys.exit(1)
else:
   print 'Using environment variable PRECICE_ROOT =', preciceRoot


##### Declare build variables and default values
#
cppdefines = [
   'PRECICE_USE_MPI',
   'Dim2'
   ]   
libpath = []   
libs = [
   'precice',
   'peano'
   ]
cpppath = [
   boostRootPath + '/boost/tr1/tr1',
   boostRootPath,
   peanoRoot + '/src',
   preciceRoot + '/src'
   ]   
ccflags = []   
cxx = 'mpicxx'      # For systems offering mpicxx compiler


##### Read command line arguments
#
buildmode = ARGUMENTS.get('buildmode', 'debug')
if buildmode == 'debug':
   cppdefines.append('STRUCTURE_DEBUG_MODE')
   cppdefines.append('Debug')
   cppdefines.append('Asserts')
   ccflags.append('-g3')
   ccflags.append('-O0')
elif buildmode == 'release':
   ccflags.append('-O3')
else:
   print "ERROR: flag 'buildmode' must be set to either 'debug' or 'release'!"
   sys.exit(1)

libpath.append (peanoRoot + '/src/build/' + buildmode + '/dim2/lib/')
libpath.append (preciceRoot + '/build/' + buildmode + '-dim2-mpi-serial/')


##### Setup build environment and issue builds
#
env = Environment ( 
   CPPDEFINES = cppdefines,  # defines for preprocessor (#define xyz)
   LIBPATH    = libpath,     # path to libraries used
   LIBS       = libs,        # libraries used (without prefix "lib" and suffix ".a"/".so"/...)
   CPPPATH    = cpppath,     # pathes where the preprocessor should look for files
   CCFLAGS    = ccflags,     # flags for the c/c++ compilers
   CXX = cxx                 # the c++ compiler that should be used
   )
   
env.Program ( buildmode + '/structure0815', Glob('*.cpp') )